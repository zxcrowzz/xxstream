<!DOCTYPE html>

<html>

<link rel="stylesheet" href="em.css">
<img alt="No image supported" id = "empireimg" src="/DALLÂ·E 2024-11-25 01.08.22 - A minimalistic orange and yellow crown logo with simple geometric shapes. The design features smooth gradients and a sleek, modern style. The crown co.webp">
<h3 id = "Express2">Express</h3>
<h3 id = "Market2">Market</h3>


<div id = "user">
<img alt="noimg" id = "userimg" src="https://icones.pro/wp-content/uploads/2021/02/icone-utilisateur-orange.png">
Logged in as<p>Current Balance</p> 


<button id = "Logoutbtn">

    Logout
</button>

</div>


<div id = "navbar">
  <a href="/em">
<button id = "btn1" class = "class2">

HOME

</button>
</a>




<button id = "btn3" class = "class2">

    MESSAGES
    
</button>
<% if (isAllowed) { %>
  <form action="/orders1" method="post">
<button id = "btn8" class = "class2">

  LIST A PRODCUT
  
</button>
</form>
<% } %>
<% if (isAllowed) { %>
<form action="/orders" method="post">
<button type="submit" id = "btn4" class = "class2">

    ORDERS
    
</button>
</form>
<% } %>


 

<button id = "btn7" class = "class2">

    FEEDBACK
    
</button>





<button id = "btn9" class = "class2">

    SUPPORT
</button>

</div>




<div id = "bodyContainer">

    
  <form id="formz" style="display: none;" action="/order/create" method="POST">
    <input type="hidden" name="productId" value="<%= productId %>">  <!-- Hidden productId from the URL -->
    <input type="hidden" name="vendorId" id="vendorId" value="">  <!-- Hidden vendorId -->

    <div>
        <label for="address">Shipping Address:</label>
        <textarea name="address" id="address" required></textarea>
    </div>

    <div>
        <label for="payerName">Name:</label>
        <input type="text" name="payerName" id="payerName" required>
    </div>

    <div>
        <label for="payerEmail">Email:</label>
        <input type="email" name="payerEmail" id="payerEmail" required>
    </div>

    <button id="sumbityy" type="submit">Place Order</button>
</form>







  <style>
 

    
  </style>


    






  
  <div id = "product-container" style="display: none;"></div>
  
  <div id="time">Loading...</div>
    <div id = "noticeBar">
      


    </div>

    <h1 id="copyrighted">Copyright &copy; 2024 Express Market</h1>

    <div id = "userContainer">
       


        <form id="profile-form" method="POST" enctype="multipart/form-data">
          
          <input type="file" id="profile-img-upload" name = "profileImage" accept="image/*" required />
          <img id = "userImg1">
          <button type="submit" id="submitBtn" style="display:none">Submit</button>
        <h2 id = "userNameC">User</h2>
        </form>

        <h2 id = "joineddate">
            Joined:
        </h2>
        <h2 id = "trust">Trust level:</h2>
        <h2 id = "sales">Total sales:</h2>
        <h2 id = "orders1">Total orders:</h2>

    </div>


    <h3 id = "userz">Welcome, User</h3>

    <div id = "pinshRED">
        Hello and welcome to Express Marketplace. Remember to enable 2FA to secure your account

    </div>


    <div id = "autoshop">
        <h3 id = "access1">Access the CC autoshop</h3>
        <h3 id = "access2">Access the Accounts autoshop</h3>
        <div id = "autoshopName">

            


           <h2 id = "move">AUTOSHOP</h3>
            

        </div>
    </div>

    <div id = "lottery">
        <h3 id = "access4">Access the Lottery</h3>
        
        <div id = "lotteryNAME">

            


           <h2 id = "move1">LOTTERY</h3>
            

        </div>
    </div>



<div id = "quickSearch">
        <h2 id = "searrch">
            Search:
        </h2>
        <input id = "searching">
        
        <button id = "confirmSearch">

            Search
        </button>
        <div id = "quicksearch1">

            


           <h2 id = "move2">QUICK SEARCH</h3>
            

        </div>
    </div>








    <div id = "BrowseBar">
    
        
        
        <div id = "brows">

            


           <h2 id = "move6">BROWSE CATEGORIES</h3>
            
            
        </div>

        <div id = "categorContainer">

            <details>
                <summary class = "clickme" id = "fashion">Clothing</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>


              <details>
                <summary class = "clickme" id = "electronics">Electronics</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>


              <details>
                <summary class = "clickme" id = "home">Guides & Tutorials</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>

              <details>
                <summary class = "clickme" id = "beauty">Accessories</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>

              <details>
                <summary class = "clickme" id = "sports1">Digital Products</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>
              

              <details>
                <summary class = "clickme" id = "sports2">Jewels & Gold</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>
              
              <details>
                <summary class = "clickme" id = "sports3">Shoes</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>
              

              <details>
                <summary class = "clickme"  id = "sports4">Cards</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>

              <details>
                <summary class = "clickme" id = "sports5">Other Listings</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>

              <details>
                <summary class = "clickme" id = "sports6">Software</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>
              
              <details>
                <summary class = "clickme" id = "sports7">Security & Hosting</summary>
                <ul class="nested-list">
                  <li>nill</li>
                  <li>nill</li>
                  <li>nill</li>
                </ul>
              </details>



            
              
              


              
        </div>


    </div>


    <div id = "featured" >
        
        
        
        

       
        <div id = "quicksearch2">

            


           <h2 id = "move3">FEATURED LISTINGS</h2>
            
           
         <div id = "acidListing">
          <h2 class = "looneyHeader"> ADULT T-SHIRT BLACK XL</h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732877103/products/l5bvmy2v16ghfwqmsbjy.jpg" id = "looney">
                <h3 class = "itemnumber">Item #174392 - Clothing - theadmin</h3>
                <h3 class= "buyz">Buy: USD 25</h3>



            </div>

            <div id = "FakeIdListing">
                <h2 class = "looneyHeader"> PS4 SLIM EDITION </h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732797083/products/bru7iz3jn4swxxkkaohe.jpg" id = "looney">
                <h3 class = "itemnumber">Item #121798 - Electronics - nathanjohn</h3>
                <h3 class = "buyz">Buy: USD 150</h3>



            </div>


            <div id = "BlackTar">
                <h2 class = "looneyHeader"> SIGNED JOEYY LA DODGERS HAT </h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732741232/products/k1qwdn3jrz5xxowgpndf.jpg" id = "looney">
                <h3 class = "itemnumber">Item #194593 - Accessories - nathanjohn</h3>
                <h3 class = "buyz">Buy: USD 100</h3>



            </div>

             <div id = "AdderalListing">
                <h2 class = "looneyHeader"> JORDAN RETRO 1 - USED NEW! </h2>
                <img src=" https://res.cloudinary.com/djcv26add/image/upload/v1732752836/products/tqakix0p9y3v5t8zeqcu.jpg" id = "looney">
                <h3 class = "itemnumber">Item #137533 - Shoes - theadmin</h3>
                <h3 class = "buyz">Buy: USD 110</h3>



            </div>



            <div id = "ShroomsListing">
                <h2 class = "looneyHeader"> WHITE T-SHIRT XL</h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732945174/products/b4lt3xb0nrmiez1x5hjg.webp" id = "looney">
                <h3 class = "itemnumber">Item #113589 - Clothing - theadmin</h3>
                <h3 class = "buyz">Buy: USD 17</h3>



            </div>


            <div id = "MethListing">
                <h2 class = "looneyHeader">BLACK SWEATSHIRT XL</h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732946422/products/edeqisl0xnnpargyoqo9.webp" id = "looney">
                <h3 class = "itemnumber">Item #117931 - Clothing - theadmin</h3>
                <h3 class = "buyz">Buy: USD 70</h3>



            </div>


            <div id = "CocaineListing">
                <h2 class = "looneyHeader">DENIM MENS JEANS BLACK </h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732947525/products/atmsi8azfprnzwwcg8ux.webp" id = "looney">
                <h3 class = "itemnumber">Item #153932 - Clothing - theadmin</h3>
                <h3 class = "buyz">Buy: USD 65</h3>


                    
            </div>



            
            <div id = "mdmaListing">
                <h2 class = "looneyHeader">AIR JORDAN RETRO 3 BASKETBALL SHOES </h2>
                <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732946970/products/gyoi3wokhbvyxejiwy49.jpg" id = "looney">
                <h3 class = "itemnumber">Item #139917 - Shoes - theadmin</h3>
                <h3 class = "buyz">Buy: USD 250</h3>


                    
            </div>



                
            <div id = "WeedListing">
              <h2 class = "looneyHeader"> NIKE DUNK LOW RETRO SHOES</h2>
              <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732948321/products/t1w5fvyd8aypzkwsxfmp.jpg" id = "looney">
              <h3 class = "itemnumber">Item #199912 - Shoes - theadmin</h3>
              <h3 class = "buyz">Buy: USD 145</h3>


                  
          </div>

          <div id = "sCB">
            <h2 class = "looneyHeader"> JBL VIBE EARBUDS BLACK</h2>
            <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732947952/products/myayhwsihmvz05m4tvpa.webp" id = "looney">
            <h3 class = "itemnumber">Item #149713 - Electronics - theadmin</h3>
            <h3 class = "buyz">Buy: USD 77</h3>


                
        </div>


        <div id = "oil">
          <h2 class = "looneyHeader"> USB FLASH DRIVE 64 GB</h2>
          <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732948623/products/ukmv2hgolliunzlduziv.png" id = "looney">
          <h3 class = "itemnumber">Item #173723 - Electronics - theadmin</h3>
          <h3 class = "buyz">Buy: USD 19</h3>


              
      </div>


      <div id = "dmt">
        <h2 class = "looneyHeader"> Donation</h2>
        <img src="https://res.cloudinary.com/djcv26add/image/upload/v1732853203/products/tsgf6oh7jcx7aflih1al.png" id = "looney">
        <h3 class = "itemnumber">Item #112773 - Other Listings - theadmin</h3>
        <h3 class = "buyz">Buy: USD 1</h3>

        
     </div>
        
            

           


        </div>


        <div id = "secur">



            <div id = "access6">

                <h3 id = "fumble">SECURITY</h3>
            </div>
          
            <h2 id = "label1">Account Security: 0%</h2>
            <div id = "statusSecure"></div>

            <h3 id = "label2">You do not have any PGP key on your profile. [Add]</h3>
            <h3 id = "label3">You are currently not using two factor authentication 2FA. [ENABLE]</h3>
          
        </div>



        <div id = "inv">



            <div id = "access7">

                <h3 id = "fumble1">Invite People and Earn Money!</h3>
            </div>
          
           
            

            <h3 id = "label4">Express Market has an affiliate program where you can earn 20% of the profits every time your referral purchases anything on the market.</h3>
            <h3 id = "label5">Your Referral link: n u l l</h3>
            <h3 id = "label6">Your Referral Count: 0</h3>
            <h3 id = "label7">Your Referral Earnings: USD 0.00</h3>
          
        </div>




        <div id = "News">



            <div id = "access8">

                <h3 id = "fumble1">News</h3>
            </div>
          
           
            
            <h1 id = "topz">11/24/2024

             


            </h1>
            <h3 id = "label8">Express Market Creation</h3>
          
        </div>



        
        <div id = "Searchingz">



          <div id = "access9">

              <h3 id = "fumble3">SEARCH OPTIONS</h3>
          </div>


          <div id = "srchcntr">

            <h3 id = "hach3">Search terms:</h3>
            <input id = "hello">

            <button id = "srchbtn"></button>

            <button id = "refrsh"></button>

          </div>
     


      
         
          <div id = "divvy">
            <label class="check-circle">
           
              <input type="checkbox" class="checkbox">
              <span class="circle"></span>
  
              All
           </label>
  
           <label class="check-circle">
             
            <input type="checkbox" class="checkbox">
            <span class="circle"></span>
  
            Digital
         </label>
  
           
         <label class="check-circle">
             
          <input type="checkbox" class="checkbox">
          <span class="circle"></span>
  
          Physical
       </label>
       <label class="check-circle">
             
        <input type="checkbox" class="checkbox">
        <span class="circle"></span>
  
        Auto Dispatch
     </label>

          </div>
          

     
       

         
      <h3 id="pr">Price range:</h3>
<div id = "mover">
    <label for="priceFrom">From: </label>
    <select id="priceFrom" name="priceFrom">
        <option value="0">$0</option>
        <option value="50">$50</option>
        <option value="100">$100</option>
        <option value="200">$200</option>
        <option value="500">$500</option>
    </select>

    <label for="priceTo">To: </label>
    <select id="priceTo" name="priceTo">
        <option value="50">$50</option>
        <option value="100">$100</option>
        <option value="200">$200</option>
        <option value="500">$500</option>
        <option value="1000">$1000+</option>
    </select>
</div>
      
  <h3 id = "cat">

Category:



<select id="priceTo1" name="priceTo">
  <option value="50">NULL</option>
  <option value="100">NULL</option>
  <option value="200">NULL</option>
  <option value="500">NULL</option>
  <option value="1000">NULL</option>
</select>
  </h3>   

  <h3 id = "origin">

    Origin country


    <select id="priceTo2" name="priceTo">
      <option value="50">NULL</option>
      <option value="100">NULL</option>
      <option value="200">NULL</option>
      <option value="500">NULL</option>
      <option value="1000">NULL</option>
    </select>
  </h3>  


  <h3 id = "Ship">

 Ships To:

 <select id="priceTo3" name="priceTo">
  <option value="50">NULL</option>
  <option value="100">NULL</option>
  <option value="200">NULL</option>
  <option value="500">NULL</option>
  <option value="1000">NULL</option>
</select>
  </h3>  

  <h3 id = "Orderz">
  Order By:

  <select id="priceTo4" name="priceTo">
    <option value="50">NULL</option>
    <option value="100">NULL</option>
    <option value="200">NULL</option>
    <option value="500">NULL</option>
    <option value="1000">NULL</option>
  </select>
  </h3>  




  <h3 id = "stock">
    In Stock:
  
    <select id="priceTo5" name="priceTo">
      <option value="50">NULL</option>
      <option value="100">NULL</option>
      <option value="200">NULL</option>
      <option value="500">NULL</option>
      <option value="1000">NULL</option>
    </select>
    </h3>  
        



    <h3 id = "Payment">
      Payment:
    
      <select id="priceTo6" name="priceTo">
        <option value="50">NULL</option>
        <option value="100">NULL</option>
        <option value="200">NULL</option>
        <option value="500">NULL</option>
        <option value="1000">NULL</option>
      </select>
      </h3>  



      <h3 id = "Coin">
        Coin:
      
        <select id="priceTo7" name="priceTo">
          <option value="50">NULL</option>
          <option value="100">NULL</option>
          <option value="200">NULL</option>
          <option value="500">NULL</option>
          <option value="1000">NULL</option>
        </select>
        </h3>  
  
      

        <h3 id = "Verified">
          Verified:
        
          <select id="priceTo8" name="priceTo">
            <option value="50">No</option>
            <option value="100">Yes</option>
           
          </select>
          </h3>  






              
      <h3 id="pr1">Vendor Trust Level</h3>
      <div id = "mover1">
          <label for="priceFrom"></label>
          <select id="priceFrom01" name="priceFrom">
              <option value="0">1</option>
              <option value="50">2</option>
              <option value="100">3</option>
              <option value="200">4</option>
              <option value="500">5</option>
          </select>
      
          <label for="priceTo">To: </label>
          <select id="priceTo01" name="priceTo">
              <option value="50">1</option>
              <option value="100">2</option>
              <option value="200">3</option>
              <option value="500">4</option>
              <option value="500">5</option>
              
          </select>
      </div>
      
  </div>


   
    
    

     


  
    
  
</div>



<div id = "EXCHANGE">



  <div id = "access9">

      <h3 id = "fumble1">EXCHANGE RATES</h3>
  </div>

  <h2 id = "btc1">Bitcoin (BTC)</h2>
<div id = "holder1">
  <h3 class = "Hexlo" id = "usd1">United States Dollar (USD)</h3>
  <h3 class = "Hexlo"  id = "canadianD">Canadian Dollar (CAD)</h3>
  <h3 class = "Hexlo" id = "euro1">Euro (EUR)</h3>
  <h3 class = "Hexlo"  id = "AD">Australian Dollar (AUD)</h3>
<h3  class = "Hexlo" ID = "DEPOSITS">Deposits & Withdrawals</h3>

</div>



<h2 id = "ltc1">Litecoin (LTC)</h2>
<div id = "holder2">
  <h3 class = "Hexlo" id = "usd1">United States Dollar (USD)</h3>
  <h3 class = "Hexlo"  id = "canadianD">Canadian Dollar (CAD)</h3>
  <h3 class = "Hexlo" id = "euro1">Euro (EUR)</h3>
  <h3 class = "Hexlo"  id = "AD">Australian Dollar (AUD)</h3>
<h3  class = "Hexlo" ID = "DEPOSITS">Deposits & Withdrawals</h3>

</div>



<h2 id = "xmr1">USD (USD)</h2>
<div id = "holder3">
  <h3 class = "Hexlo" id = "usd1">United States Dollar (USD)</h3>
  <h3 class = "Hexlo"  id = "canadianD">Canadian Dollar (CAD)</h3>
  <h3 class = "Hexlo" id = "euro1">Euro (EUR)</h3>
  <h3 class = "Hexlo"  id = "AD">Australian Dollar (AUD)</h3>
<h3  class = "Hexlo" ID = "DEPOSITS">Deposits & Withdrawals</h3>

</div>





 
    </div>






    





   



</div>


><script>
    async function getUsername() {
  const response = await fetch('/get-username');
  const data = await response.json();

  if (response.ok) {
    document.getElementById('userNameC').innerText = `${data.name}`;
    document.getElementById('userz').innerText = `Welcome, ${data.name}`;
  } else {
    console.log('Error:', data);
  }
}
getUsername()
document.addEventListener('DOMContentLoaded', function() {
document.getElementById('profile-img-upload').addEventListener('change', async function(event) {
  event.preventDefault(); // Prevent the default form submission behavior
  console.log('hey')
  const formData = new FormData();
  const fileInput = document.getElementById('profile-img-upload');
  const file = fileInput.files[0]; // Get the file the user selected

  if (file) {
    formData.append('profileImage', file);

    try {
      // Send the file to the server
      const response = await fetch('/upload-profile', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();

        // Assuming the response contains the user's new profile image URL
        if (data.user) {
          alert('Profile image uploaded successfully!');
          
          // Update the profile image on the page
          const profileImg = document.querySelector('#userImg1');
          profileImg.src = data.user.profileImageUrl; // Set the image source to the uploaded profile image URL
          profileImg.style.display = 'block'; // Show the image if it's hidden

          // Also, update the username
          const userNameC = document.getElementById('userNameC');
          userNameC.innerText = data.user.name; // Assuming the response contains the username
        }
      } else {
        const errorData = await response.json();
        alert('Error uploading image: ' + errorData.message);
      }
    } catch (error) {
      console.error('Error uploading profile image:', error);
      alert('Error uploading profile image.');
    }
  } else {
    alert('Please select an image to upload.');
  }
});

});


document.addEventListener('DOMContentLoaded', () => {
   window.onload = async () => {
  try {
    const response = await fetch('/profile'); // Request the profile data from the server
    const data = await response.json();

    if (data.user) {
      // Update the profile image with the URL returned from the server
      const profileImg = document.querySelector('#userImg1');
      profileImg.src = data.user.profileImageUrl || 'default-profile-image-url'; // Fallback to a default image if not set
      profileImg.style.display = 'block'; // Ensure the image is visible
    } else {
      console.error('Error fetching user profile data');
    }
  } catch (error) {
    console.error('Error loading profile data:', error);
  }
};
});

async function fetchServerTime() {
            try {
                // Fetch the time from the server
                const response = await fetch("/time");
                const data = await response.json();

                // Parse the time and display it
                const serverTime = new Date(data.time);
                const options = { weekday: "long", year: "numeric", month: "long", day: "numeric", hour: "2-digit", minute: "2-digit", second: "2-digit" };

                document.getElementById("time").textContent = serverTime.toLocaleString("en-US", options);
            } catch (error) {
                console.error("Error fetching server time:", error);
                document.getElementById("time").textContent = "Unable to fetch time.";
            }
        }

        // Call the function to fetch and display server time
        fetchServerTime();



        document.getElementById("btn3").addEventListener("click", () => {
        // Redirect to the desired page
        window.location.href = "/messagez";
    });



const clickme = document.querySelector(".clickme");
const userContainer = document.getElementById("userContainer");
const pinshRED = document.getElementById("pinshRED");
const userz = document.getElementById("userz");
const autoshop = document.getElementById("autoshop");
const lottery = document.getElementById("lottery");
const quickSearch = document.getElementById("quickSearch");
const featured = document.getElementById("quicksearch2");
const BrowseBar = document.getElementById("BrowseBar");
const Searchingz = document.getElementById("Searchingz");
let currentCategory = ''; // Store the currently active category
let controller = null; // This will hold the AbortController for each request

document.querySelectorAll('.clickme').forEach((summary) => {
  summary.addEventListener('click', async () => {
    const category = summary.id;
    const productContainer = document.getElementById('product-container');

    if (currentCategory === category) {
      productContainer.innerHTML = '';
      productContainer.style.display = 'none';
      pinshRED.style.display = "block";
      currentCategory = '';
      return;
    }

    if (currentCategory !== '') {
      productContainer.innerHTML = '';
      productContainer.style.display = 'none';
      pinshRED.style.display = "block";
    }

    currentCategory = category;
    productContainer.style.display = 'block';
    pinshRED.style.display = "none";
    productContainer.innerHTML = '';

    if (controller) {
      controller.abort();
    }

    controller = new AbortController();
    const signal = controller.signal;

    try {
      const response = await fetch(`/products/${category}`, { signal });
      if (!response.ok) throw new Error('Failed to fetch products');

      const products = await response.json();

      if (products.length === 0) {
        productContainer.innerHTML = '<p>No products available in this category.</p>';
      } else {
        products.forEach((product) => {
          const productItem = document.createElement('div');
          productItem.classList.add('product-item');
          productItem.innerHTML = ` 
            <div class="product" data-id="${product._id}">
              <img src="${product.imageUrl}" alt="${product.name}" id="heyf">
              <h4 id="eey3">${product.name}</h4>
              <p id="desc">${product.description}</p>
              <p id="price">Price: $${product.price}</p>
              <p id="posted-by">Posted by: <strong>${product.userId?.name || 'Unknown User'}</strong></p>
            </div>
          `;

          productItem.addEventListener('click', () => renderDetailedProduct(product));
          productContainer.appendChild(productItem);
        });
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log('Request was aborted');
      } else {
        console.error('Error loading products:', error);
      }
    }
  });
});

async function checkStockAvailability(productId) {
  console.log('Product ID:', productId); // Log the product ID

  if (!productId) {
    console.error('Product ID is undefined');
    return false;
  }

  try {
    // Update the URL to match the server route
    const response = await fetch(`/product/stock/${productId}`);

    if (!response.ok) {
      throw new Error('Stock check failed');
    }

    const result = await response.json();
    console.log('Stock check response:', result);
    return result.quantity > 0; // Adjust according to your response format
  } catch (error) {
    console.error('Error checking stock:', error);
    return false;
  }
}




function renderDetailedProduct(product) {
  const productContainer = document.getElementById('product-container');
  productContainer.innerHTML = '';

  const productDetail = document.createElement('div');
  productDetail.classList.add('product-container');
  productDetail.style.display = 'block';
  productDetail.innerHTML = ` 
    <div class="product-header">
      <img src="${product.imageUrl}" alt="${product.name}" class="product-image">
      <div class="details">
        <h2>${product.name}</h2>
        <p>Sold by ${product.userId?.name || 'Unknown User'} | Vendor Level 3 | Trust Level 1</p>
        <p>${product.quantity || '0'} items left | Ships to: United States</p>
        <p>USD $${product.price}</p>
      </div>
    </div>
    <table class="table">
      <tr>
        <th>Product Class</th>
        <td>Physical Package</td>
      </tr>
      <tr>
        <th>Origin Country</th>
        <td>United States</td>
      </tr>
      <tr>
        <th>Features</th>
        <td>${product.features || 'NILL'}</td>
      </tr>
    </table>
    <div class="buttons" id="paypal-button-container">
      <!-- PayPal button will be rendered here -->
    </div>
    <div class="description">
      <h3>Description</h3>
      <p>${product.description}</p>
    </div>

    <div class="quantity-selector">
      <label for="quantity-${product._id}">Select Quantity:</label>
      <input type="number" id="quantity-${product._id}" name="quantity" min="1" max="${product.quantity}" value="1">
    </div>
  `;

  productContainer.appendChild(productDetail);

  // Check stock before rendering PayPal button
  checkStockAvailability(product._id).then(isStockAvailable => {
    if (!isStockAvailable) {
      alert('Insufficient stock. Please try again later.');
      return; // Don't render the PayPal button if stock is unavailable
    }

    console.log('Stock is available, rendering PayPal button');

    // Render the PayPal button
    function renderPaypalButton() {
      // Remove existing PayPal button if it exists
    const existingButton = document.getElementById('paypal-button-container');
if (existingButton) {
  existingButton.innerHTML = "";  // Clears the content inside the container
}


      paypal.Buttons({
        fundingSource: paypal.FUNDING.CARD,
        createOrder: function (data, actions) {
          const quantityInput = document.getElementById(`quantity-${product._id}`);
          const quantityValue = parseInt(quantityInput.value, 10);

          if (isNaN(quantityValue) || quantityValue <= 0) {
            alert("Please select a valid quantity.");
            return;
          }

          return actions.order.create({
            purchase_units: [{
              amount: { value: (product.price * quantityValue).toString() }
            }]
          });
        },
        onApprove: function (data, actions) {
          const quantityInput = document.getElementById(`quantity-${product._id}`);
          const quantityValue = parseInt(quantityInput.value, 10);

          return actions.order.capture().then(function (details) {
            const orderDetails = {
              productId: product._id,
              productName: product.name,
              price: product.price,
              quantity: quantityValue,
              vendorId: product.userId._id,
              payerName: `${details.payer.name.given_name} ${details.payer.name.surname}`,
              payerEmail: details.payer.email_address,
              orderId: details.id,
              shippingAddress: details.purchase_units[0].shipping.address
            };

            return fetch('/order/create', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(orderDetails)
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  alert('Order placed successfully!');
                  window.location.href = '/em';
                } else {
                  alert('Error placing order: ' + data.message);
                }
              })
              .catch(error => {
                console.error("Error during order placement:", error);
                alert("Failed to place the order. Please try again.");
              });
          });
        }
      }).render('#paypal-button-container');
    }

    // Initial rendering of PayPal button
    renderPaypalButton();

    // Listen for changes in quantity and re-render PayPal button with updated price
    const quantityInput = document.getElementById(`quantity-${product._id}`);
    quantityInput.addEventListener('input', function () {
      renderPaypalButton(); // Re-render PayPal button when quantity changes
    });

  }).catch(error => {
    console.error("Error checking stock availability:", error);
  });
}









document.addEventListener('click', async (event) => {
  if (event.target.classList.contains('delete-button')) {
    const productId = event.target.getAttribute('data-id');

    // Show confirmation dialog
    const confirmed = confirm('Are you sure you want to delete this product?');
    if (!confirmed) return;

    // Send DELETE request to the server
    try {
      const response = await fetch(`/delete-product/${productId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
      });

      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        // Remove the product from the UI
        event.target.closest('.product-item').remove();
      } else {
        alert(`Failed to delete product: ${result.message}`);
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      alert('An error occurred while deleting the product.');
    }
  }
});


document.getElementById('Logoutbtn').addEventListener('click', async () => {
  const confirmLogout = confirm('Are you sure you want to log out?');
  if (!confirmLogout) return;

  try {
    const response = await fetch('/logout', {
      method: 'POST',
      credentials: 'include',
    });

    if (response.ok) {
      alert('You have been logged out.');
      window.location.href = '/login';
    } else {
      alert('Failed to log out. Please try again.');
    }
  } catch (error) {
    console.error('Error during logout:', error);
    alert('An error occurred while logging out.');
  }
});




async function checkProductStock(productId, requestedQuantity) {
  try {
    const response = await fetch(`/product/stock/${productId}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch stock: ${response.status}`);
    }

    const product = await response.json();
    if (product.quantity < requestedQuantity) {
      return false; // Insufficient stock
    }

    return true; // Sufficient stock
  } catch (error) {
    console.error("Error checking product stock:", error);
    return false; // Default to insufficient stock on error
  }
}

document.getElementById('confirmSearch').addEventListener('click', async () => {
    const query = document.getElementById('searching').value.trim();

    // Ensure the query is not empty
    if (!query) {
        alert('Please enter a username to search!');
        return;
    }

    // Make a search request to the backend
    try {
        const response = await fetch(`/search-users?q=${query}`);
        if (!response.ok) throw new Error('Error fetching search results');
        const results = await response.json();

        const resultsContainer = document.getElementById('quicksearch1');
        resultsContainer.innerHTML = '<h2 id="move2">QUICK SEARCH</h2>'; // Clear previous results but keep the title

        if (results.length === 0) {
            resultsContainer.innerHTML += '<p>No users found.</p>';
            return;
        }

        // Add each user to the results container
        results.forEach(user => {
            const userDiv = document.createElement('div');
            userDiv.style.cssText = 'display: flex; align-items: center; border: 1px solid #ccc; margin: 5px 0; padding: 10px; cursor: pointer;';
            userDiv.innerHTML = `
                <img src="${user.profileImage}" alt="${user.username}" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 10px;">
                <span style="font-size: 16px; font-weight: bold;">${user.username}</span>
            `;
            userDiv.addEventListener('click', () => {
                window.location.href = `/profile/${user._id}`; // Redirect to user's profile page
            });
            resultsContainer.appendChild(userDiv);
        });
    } catch (err) {
        console.error('Search error:', err);
        alert('Failed to fetch search results. Please try again later.');
    }
});

// Function to handle the search
document.getElementById('srchbtn').addEventListener('click', async () => {
  const searchInput = document.getElementById('hello').value.trim();
  const checkboxes = Array.from(document.querySelectorAll('#divvy .checkbox:checked')).map(cb => cb.parentElement.textContent.trim());
  const priceFrom = document.getElementById('priceFrom').value;
  const priceTo = document.getElementById('priceTo').value;

  // Create the search query object
  const searchQuery = {
    searchTerm: searchInput,
    categories: checkboxes,
    priceRange: { from: priceFrom, to: priceTo },
    // Add more filters as needed
  };

  try {
    // Send the search request to the server
    const response = await fetch('/search', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(searchQuery)
    });

    if (!response.ok) {
      throw new Error('Failed to fetch search results');
    }

    const products = await response.json();

    // Render the search results
    renderSearchResults(products);
  } catch (error) {
    console.error('Error during search:', error);
    alert('Failed to perform search. Please try again.');
  }
});

// Function to render search results
function renderSearchResults(products) {
  const productContainer = document.getElementById('product-container');
  productContainer.innerHTML = ''; // Clear any previous results

  if (products.length === 0) {
    productContainer.innerHTML = '<p>No products found matching your search criteria.</p>';
    return;
  }

  products.forEach(product => {
    const productCard = document.createElement('div');
    productCard.classList.add('product-card');
    productCard.innerHTML = `
      <div class="product-header">
        <img src="${product.imageUrl}" alt="${product.name}" class="product-image">
        <div class="details">
          <h2>${product.name}</h2>
          <p>${product.quantity || '0'} items left | USD $${product.price}</p>
          <button class="view-details" data-id="${product._id}">View Details</button>
        </div>
      </div>
    `;
    productContainer.appendChild(productCard);
  });

  // Add event listeners to "View Details" buttons
  document.querySelectorAll('.view-details').forEach(button => {
    button.addEventListener('click', () => {
      const productId = button.getAttribute('data-id');
      fetchProductDetails(productId);
    });
  });
}

// Function to fetch and render detailed product view
async function fetchProductDetails(productId) {
  try {
    const response = await fetch(`/product/${productId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch product details');
    }

    const product = await response.json();
    renderDetailedProduct(product);
  } catch (error) {
    console.error('Error fetching product details:', error);
  }
}

</script>





<script src="https://www.paypal.com/sdk/js?client-id=AU0cVDF6YEaTIHqGnL819YVXDyJ1msfskbiRl8CzKC-PgzvzGiLoB6hOwQPfQzOlUsCpqlJ6f-q4F1Rz&components=buttons"></script>

<script>
  document.getElementById('btn1').addEventListener('click', () => {
      window.location.href = '/em'; // Redirect to the home page
  });
</script>
  
</html>
